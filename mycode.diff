diff --git a/.gdbinit.tmpl-riscv b/.gdbinit.tmpl-riscv 
index 452f04e..6a38a95 100644
--- a/.gdbinit.tmpl-riscv
+++ b/.gdbinit.tmpl-riscv
@@ -1,5 +1,5 @@
 set confirm off
-set architecture riscv
+set architecture riscv:rv64
 target remote 127.0.0.1:1234
 symbol-file kernel/kernel
 set disassemble-next-line auto
diff --git a/.gitignore b/.gitignore
index fc565fa..b1d8932 100644
--- a/.gitignore
+++ b/.gitignore
@@ -18,3 +18,5 @@ user/usys.S
 myapi.key
 *-handin.tar.gz
 xv6.out*
+.vagrant/
+submissions/
diff --git a/GRADING.md b/GRADING.md
new file mode 100644
index 0000000..7909924
--- /dev/null
+++ b/GRADING.md
@@ -0,0 +1,36 @@
+# Grading
+
+1. Download student submissions:
+
+    ```bash
+    mkdir -p submissions
+    rsync -rtLP ${your_kerberos}@athena.dialup.mit.edu:/mit/6.828/web_scripts/$(date +"%Y")/uploads/lab-${lab_name}/ submissions/
+    ```
+
+2. Start the grading VM and SSH in:
+
+    ```bash
+    vagrant up
+    vagrant ssh
+    ```
+
+3. Grade submissions (in the VM):
+
+    ```bash
+    cd /xv6
+    ./batch-grade --config conf/lab-${lab_name}.json --output lab-${lab_name}.json submissions
+    ```
+
+4. Copy grades to Athena:
+
+    ```bash
+    rsync lab-${lab_name}.json ${your_kerberos}@athena.dialup.mit.edu:/mit/6.828/web_scripts/$(date +"%Y")/grades/
+    ```
+
+5. Import grades:
+
+    ```bash
+    ssh ${your_kerberos}@athena.dialup.mit.edu
+    ssh ${your_kerberos}@athena.dialup.mit.edu
+    cd /mit/6.828/web_scripts/$(date +"%Y")/
+    ./import-grades.py -l ${lab_name}
+    ```
diff --git a/Makefile b/Makefile
index 3018a9e..5a90194 100644
--- a/Makefile
+++ b/Makefile
@@ -28,7 +28,9 @@ OBJS = \
   $K/sysfile.o \
   $K/kernelvec.o \
   $K/plic.o \
-  $K/virtio_disk.o
+  $K/virtio_disk.o \
+  $K/buddy.o \
+  $K/list.o
 
 # riscv64-unknown-elf- or riscv64-linux-gnu-
 # perhaps in /opt/riscv/bin
@@ -133,16 +135,16 @@ UPROGS=\
        $U/_usertests\
        $U/_wc\
        $U/_zombie\
-       $U/_cow\
+       $U/_cowtest\
        $U/_uthread\
        $U/_call\
+       $U/_testsh\
        $U/_kalloctest\
        $U/_bcachetest\
        $U/_mounttest\
        $U/_crashtest\
-       $U/_sleep\
-       $U/_find\
-       $U/_xargs
+       $U/_alloctest\
+       $U/_lazytests\
 
 fs.img: mkfs/mkfs README user/xargstest.sh $(UPROGS)
        mkfs/mkfs fs.img README user/xargstest.sh $(UPROGS)
@@ -168,7 +170,6 @@ CPUS := 3
 endif
 
 QEMUEXTRA = -drive file=fs1.img,if=none,format=raw,id=x1 -device virtio-blk-device,drive=x1,bus=virtio-mmio-bus.1
-
 QEMUOPTS = -machine virt -bios none -kernel $K/kernel -m 3G -smp $(CPUS) -nographic
 QEMUOPTS += -drive file=fs.img,if=none,format=raw,id=x0 -device virtio-blk-device,drive=x0,bus=virtio-mmio-bus.0

@@ -236,6 +237,9 @@ handin-check:

 UPSTREAM := $(shell git remote -v | grep -m 1 "mit-pdos/xv6-riscv-fall19" | awk '{split($$0,a," "); print a[1]}')

+tarball: handin-check
+       git archive --format=tar HEAD | gzip > lab-$(LAB)-handin.tar.gz
+
 tarball-pref: handin-check
        @SUF=$(LAB); \
        git archive --format=tar HEAD > lab-$$SUF-handin.tar; \
@@ -264,4 +268,4 @@ myapi.key:
        fi;


-.PHONY: handin tarball-pref clean grade handin-check
+.PHONY: handin tarball tarball-pref clean grade handin-check
diff --git a/Vagrantfile b/Vagrantfile
new file mode 100644
index 0000000..06a4cd0
--- /dev/null
+++ b/Vagrantfile
@@ -0,0 +1,29 @@
+Vagrant.configure(2) do |config|
+
+  config.vm.provider "virtualbox" do |v|
+    v.memory = 4096
+    v.cpus = 2
+  end
+
+  config.vm.box = 'ubuntu/disco64'
+
+  # synced folder
+  config.vm.synced_folder '.', '/xv6'
+
+  # disable default synced folder
+  config.vm.synced_folder '.', '/vagrant', disabled: true
+
+  # install packages
+  config.vm.provision 'shell', inline: <<-EOS
+    apt-get -y update
+    apt-get install -y \
+      python \
+      git \
+      build-essential \
+      gdb-multiarch \
+      qemu-system-misc \
+      gcc-riscv64-linux-gnu \
+      binutils-riscv64-linux-gnu
+  EOS
+
+end
diff --git a/batch-grade b/batch-grade
new file mode 100755
index 0000000..5615ec4
--- /dev/null
+++ b/batch-grade
@@ -0,0 +1,134 @@
+#!/usr/bin/env python3
+
+import argparse
+import json
+import os
+import re
+import shutil
+import subprocess
+import sys
+import tempfile
+import time
+
+
+REPO_PATH = '/xv6'
+DEVNULL = open(os.devnull, 'w')
+
+
+def main():
+    parser = argparse.ArgumentParser()
+    parser.add_argument('--config', type=str, required=True, help='configuration for grading this lab')
+    parser.add_argument('--repo', type=str, default=REPO_PATH, help='path to xv6 repository')
+    parser.add_argument('--single', action='store_true', default=False, help='grade a single submission')
+    parser.add_argument('--output', type=str, help='output filename')
+    parser.add_argument('path', help='path to submission(s)')
+    args = parser.parse_args()
+    with open(args.config) as config_file:
+        config = json.load(config_file)
+    grade(config, args.repo, args.path, args.single, args.output)
+
+
+def grade(config, repo, path, single, output):
+    if single:
+        submissions = [path]
+    else:
+        submissions = [os.path.join(path, f) for f in os.listdir(path) if not f.startswith('.')]
+    results = []
+    start = time.time()
+    for i, sub in enumerate(submissions):
+        print('{}/{}, {} elapsed, {} remaining'.format(
+            i+1,
+            len(submissions),
+            hms(time.time() - start),
+            '?' if i == 0 else hms((time.time() - start)*(len(submissions)-i)/i)
+        ), file=sys.stderr)
+        score, possible, stdout = grade_one(config, repo, sub)
+        message = '' if score == possible else stdout
+        basename = os.path.basename(sub)
+        if basename.endswith('.tar.gz'):
+            email = basename[:-len('.tar.gz')]
+        else:
+            email = basename
+        results.append({'email': email, 'grade': score, 'comment': message})
+        print('  {}: {} points'.format(email, score), file=sys.stderr)
+    results.sort(key=lambda r: r['grade'])
+    if output:
+        with open(output, 'w') as fout:
+            json.dump(results, fout, indent=2, sort_keys=True)
+    else:
+        print(json.dumps(results, indent=2, sort_keys=True))
+
+
+def grade_one(config, repo, submission):
+    git_dir = os.path.join(repo, '.git')
+    # prepare directory
+    grading_dir = tempfile.mkdtemp()
+    temps = [grading_dir]
+    if 'keep' in config:
+        # whitelist
+        # check out appropriate commit from original source
+        subprocess.check_call('git --git-dir={} archive {} | (cd {}; tar x)'.format(
+            git_dir,
